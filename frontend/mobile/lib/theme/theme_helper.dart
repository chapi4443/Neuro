import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(25.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray400,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.indigo50,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 18.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: colorScheme.errorContainer.withOpacity(0.4),
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w300,
        ),
        displaySmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 35.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: appTheme.blueGray800,
          fontSize: 32.fSize,
          fontFamily: 'Open Sans',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 12.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 10.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 20.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 16.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF16C2D5),
    primaryContainer: Color(0XFF242731),
    secondary: Color(0XFF242731),
    secondaryContainer: Color(0XFFFF718B),
    tertiary: Color(0XFF242731),
    tertiaryContainer: Color(0XFFFF718B),

    // Background colors
    background: Color(0XFF242731),

    // Surface colors
    surface: Color(0XFF242731),
    surfaceTint: Color(0XFF191919),
    surfaceVariant: Color(0XFFFF718B),

    // Error colors
    error: Color(0XFF191919),
    errorContainer: Color(0X99000000),
    onError: Color(0X7F16C2D5),
    onErrorContainer: Color(0XFF242731),

    // On colors(text colors)
    onBackground: Color(0XFFD9D9D9),
    onInverseSurface: Color(0X7F16C2D5),
    onPrimary: Color(0XFF191919),
    onPrimaryContainer: Color(0XFFD9D9D9),
    onSecondary: Color(0XFFD9D9D9),
    onSecondaryContainer: Color(0XFF191919),
    onTertiary: Color(0XFFD9D9D9),
    onTertiaryContainer: Color(0XFF191919),

    // Other colors
    outline: Color(0XFF191919),
    outlineVariant: Color(0XFF242731),
    scrim: Color(0XFF242731),
    shadow: Color(0XFF191919),

    // Inverse colors
    inversePrimary: Color(0XFF242731),
    inverseSurface: Color(0XFF191919),

    // Pending colors
    onSurface: Color(0XFFD9D9D9),
    onSurfaceVariant: Color(0XFF191919),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => const Color(0XFF0A0A0A);

  // Blue
  Color get blue100 => const Color(0XFFCAD6FF);

  // BlueGray
  Color get blueGray400 => const Color(0XFF888888);
  Color get blueGray600 => const Color(0XFF615E82);
  Color get blueGray800 => const Color(0XFF2E4450);
  Color get blueGray900 => const Color(0XFF1E1B39);

  // Cyan
  Color get cyan20033 => const Color(0X3389DEE2);
  Color get cyan50 => const Color(0XFFE2F9FA);

  // Gray
  Color get gray100 => const Color(0XFFF2F1FF);
  Color get gray10001 => const Color(0XFFF1F4FF);
  Color get gray10002 => const Color(0XFFF5F5F5);
  Color get gray200 => const Color(0XFFEBEBEB);
  Color get gray300 => const Color(0XFFE2E4E5);
  Color get gray400 => const Color(0XFFBABFC1);
  Color get gray50 => const Color(0XFFF8F8FF);
  Color get gray500 => const Color(0XFF9290A4);
  Color get gray5001 => const Color(0XFFFAFAFA);
  Color get gray5002 => const Color(0XFFF7F9FF);
  Color get gray600 => const Color(0XFFA55C4F);
  Color get gray700 => const Color(0XFF616161);
  Color get gray800 => const Color(0XFF494949);
  Color get gray80001 => const Color(0XFF4C4949);
  Color get gray900 => const Color(0XFF242426);
  Color get gray90014 => const Color(0X140D0A2C);

  // Indigo
  Color get indigo50 => const Color(0XFFE5E5EF);
  Color get indigo900 => const Color(0XFF10217D);

  // Red
  Color get red400 => const Color(0XFFE66D57);

  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
